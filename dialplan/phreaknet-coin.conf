; phreaknet-coin.conf - Dial tone first coin support
; v 1.0.2 (2024/12/22)

; This is mainly a sample config file. All coin line types are supported on PhreakNet, this just demonstrates
; how you can set up a dial tone first line, since that's probably the most common type.
; This assumes you are using Asterisk as your coin equipment, essentially.
; If you already have "real" coin support, e.g. a Redcom coin line card, you can skip most of what's here
; and just send toll calls to the toll provider as necessary (e.g. the [coin-to-toll] context)

;; ** Boilerplate Class 5 coin library ** ;;

; Add a match for coin phones to from-internal, e.g.:
;[from-internal]
;exten => _X!/5559969,1,Goto(coin-line,s,1) ; for ATAs/SIP gateways
;exten => s/5559969,1,Goto(coin-line,s,1) ; for DAHDI lines
; Alternately you could also just set context = coin-line

; If you have a coin controller, you also need AstCC: https://github.com/InterLinked1/astcc
; The dialplan code below will work even if you don't have a controller
; If you have a coin controller, there are a few changes you need to make (read the comments!) and you also need to set up AstCC to interface with your controller.
; This is needed for COLLECT and RETURN functionality to work!


;;; CLASS 5 COIN LINE HANDLING

[coin-line] ; Class 5 coin line
exten => s,1,Progress() ; answer supervision will be passed through
	same => n,Set(COIN_DETECT(rl)=) ; Enable detection using the totalizer. "Real" coin lines do a ground test instead. This fallback isn't needed if you have a coin controller.
	same => n,DialTone(number,phreaknet-digit-map,custom/signal/dialtone3,silence/10,32,,,pt) ; collect digits
	same => n,Set(deposited=${COIN_DETECT(rx)}) ; Retrieve the amount deposited by the caller before or during dialing.
	same => n,Set(COIN_DETECT(x)=) ; Disable coin detection. We don't need it anymore
	same => n,GotoIf(${ISNULL(${number})}?permsig,1)
	same => n,Set(rateclass=${EVAL_EXTEN(phreaknet-coin-rate-class-map,${number},1)})
	same => n,GotoIf(${ISNULL(${rateclass})}?invalid,1) ; you shouldn't be dialing this...
	same => n,GotoIf($["${rateclass}"="0"]?free,1)
	same => n,GotoIf($["${rateclass}"="2"]?toll,1:local,1)
exten => permsig,1,Hangup() ; Permanent signal
exten => invalid,1,Hangup() ; Invalid/unhandled number dialed
exten => insufficientinitial,1,Playback(coin-deposit-required,noanswer)
	same => n,LocalCoinDisposition(return) ; Only does anything if you have a coin controller
	same => n,Goto(s,1)
exten => free,1,CoinCall(Local/${number}@coin-to-local/n,0,0,0)
	same => n,Hangup()
exten => local,1,GotoIf($[${deposited}<25]?insufficientinitial,1) ; If you don't have a coin controller, do initial deposit check manually and pass "0" for initial deposit to CoinCall.
	same => n,CoinCall(Local/${number}@coin-to-local/n,0,0,0) ; If you do have a coin controller, just need this priority. Pass in the initial deposit as appropriate.
	same => n,Hangup()
exten => toll,1,CoinCall(Local/${number}@coin-to-toll/n,0,0,0,,acr) ; Set up Feature Group C and go to toll switch
	same => n,Hangup()

[phreaknet-coin-rate-class-map] ; This is the rate table used to determine how a call should be completed. 0 = free, 1 = local (initial deposit), 2 = send to toll provider.
exten => 0,1,Return(0)
exten => _0.,1,Return(0)
exten => _N11,1,Return(0)
exten => 411,1,Return(2)
exten => _11N,1,Return(0)
exten => 660,1,Return(0)
exten => _95[89],1,Return(0)
exten => _101XXXX.,1,Return(2)
exten => _767XXXX,1,Return(1)
exten => _844XXXX,1,Return(1)
exten => _936XXXX,1,Return(1)
exten => _976XXXX,1,Return(2)
; This code is written to be generic here, so you don't need to do anything. If you have a simple office setup, though, you can hardcode your office codes instead:
exten => _NXXXXXX,1,Return(${IF($["${CURL(https://api.phreaknet.org/v1/islocal?key=${interlinkedkey}&num1=${CALLERID(num)}&num2=${EXTEN})}"="1"]?1:2)})
exten => _1NXXXXXX,1,Return(${IF($["${CURL(https://api.phreaknet.org/v1/islocal?key=${interlinkedkey}&num1=${CALLERID(num)}&num2=${EXTEN:-7})}"="1"]?1:2)})

[coin-to-local] ; free or local calls, routed intraswitch
exten => _X!,1,Goto(phreaknet-route,${EXTEN},1)


;;; CLASS 4 COIN TRUNK HANDLING (this could be on a separate system)

[coin-to-toll] ; This is the toll provider. Any toll calls get sent to the toll provider, and then it's their problem.
; Send calls to PhreakNet ACTS, if you don't want to do it locally.
;exten => _X!,1,MSet(IAXVAR(cointol)=${cointol},IAXVAR(initiallydeposited)=${initiallydeposited})
;	same => n,Gosub(dialphreaknet-helper,s,1(${EXTEN},a)) ; use a for ACTS and c for CoinZone.
;	same => n,Hangup()
; Alternately, implement ACTS locally instead:
exten => _X!,1,Set(ARRAY(base,basemin,add)=${EVAL_EXTEN(phreaknet-coin-rate-map,${EXTEN},1)})
	same => n,ACTS(Local/${EXTEN}@to-phreaknet/n,custom/switch/tops,ai(${base})p($[${basemin}*60])o(${add}))
	same => n,NoOp(${ACTS_RESULT} / ${ACTS_FINAL_DISPOSITION})
	same => n,ExecIf($["${ACTS_FINAL_DISPOSITION}"="COLLECT"]?CoinDisposition(collect))
	same => n,ExecIf($["${ACTS_FINAL_DISPOSITION}"="RETURN"]?CoinDisposition(return))
	same => n,Hangup()

[phreaknet-coin-rate-map] ; Map to return charges for any calls made
exten => _X!,1,Return(${CURL(https://api.phreaknet.org/v1/rates?key=${interlinkedkey}&num1=${CALLERID(num)}&num2=${EXTEN}&payphone)})
