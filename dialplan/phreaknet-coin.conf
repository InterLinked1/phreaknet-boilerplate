; phreaknet-coin.conf - Dial tone first coin support
; v 1.0.1 (2022/09/03)

; This is mainly a sample config file. All coin line types are supported on PhreakNet, this just demonstrates
; how you can set up a dial tone first line, since that's probably the most common type.
; This assumes you are using Asterisk as your coin equipment, essentially.
; If you already have "real" coin support, e.g. a Redcom coin line card, you can skip most of what's here
; and just send toll calls to the toll provider as necessary.

; There are a few TODOs in this file that you will need to implement yourself. This is completely
; dependent on the physical coin controller unit you are using. This will probably involve System()
; calls to some kind of network or serial device, in order to control the coin controller.
; The actual COLLECT and RETURN functionality WILL NOT WORK until you complete these stubs per your system!!!

; Add a match for coin phones to from-internal, e.g.:
;[from-internal]
;exten => _X!/5559969,1,Goto(phreaknet-dtf,s,1)

;;; !!! TODO !!!
;;; When we receive a coin disposition via Expanded In-Band Signaling over a Feature Group C trunk, a CoinDisposition AMI event is emitted.
;;; This program (outside of Asterisk) will then need to be able to collect or return (or put in operator attached/released mode), based on the disposition.
;;; This is separate from and outside of the dialplan.
;;; If you don't already have an AMI library, you can use CAMI to do this: https://github.com/InterLinked1/cami

[coin-return]
exten => s,1,Log(WARNING,TODO!!!!!! COIN RETURN) ; TODO: This should probably be a System() call to your physical coin controller to make it return.
	same => n,Return()

[coin-collect]
exten => s,1,Log(WARNING,TODO!!!!!! COIN COLLECT) ; TODO: This should probably be a System() call to your physical coin controller to make it collect.
	same => n,Return()

[operator-attached]
exten => s,1,Log(WARNING,TODO!!!!!! OPERATOR ATTACHED) ; TODO: Put the phone in operator attached mode via coin controller. ACTS will expect the phone is operator attached.
	same => n,Return()

;; ** Boilerplate Class 5 coin library ** ;;

[phreaknet-dtf] ; This is a dial tone first PhreakNet line
exten => s,1,Gosub(coin-line,DTF,1(10,phreaknet-digit-map,phreaknet-coin-rate-class-map,phreaknet-route,to-phreaknet-acts,1)) ; Arguments for the coin line configuration.
	same => n,Hangup()

[phreaknet-coin-rate-class-map] ; This is the rate table used to determine how a call should be completed. 0 = free, 1 = local (initial deposit), 2 = send to toll provider.
exten => 0,1,Return(0)
exten => _0.,1,Return(0)
exten => _N11,1,Return(0)
exten => 411,1,Return(2)
exten => _11N,1,Return(0)
exten => 660,1,Return(0)
exten => _95[89],1,Return(0)
exten => _101XXXX.,1,Return(2)
exten => _767XXXX,1,Return(1)
exten => _844XXXX,1,Return(1)
exten => _936XXXX,1,Return(1)
exten => _976XXXX,1,Return(2)
; This code is written to be generic here, so you don't need to do anything. If you have a simple office setup, though, you can hardcode your office codes instead:
exten => _NXXXXXX,1,Return(${IF($["${CURL(https://api.phreaknet.org/v1/islocal?key=${interlinkedkey}&num1=${CALLERID(num)}&num2=${EXTEN})}"="1"]?1:2)})
exten => _1NXXXXXX,1,Return(${IF($["${CURL(https://api.phreaknet.org/v1/islocal?key=${interlinkedkey}&num1=${CALLERID(num)}&num2=${EXTEN:-7})}"="1"]?1:2)})

[to-phreaknet-acts] ; This is the toll provider. Any toll calls get sent to the toll provider, and then it's their problem.
; The call must route to a Feature Group C toll provider that supports Expanded In-Band Signaling. This could be either ACTS or CoinZone on PhreakNet. 
exten => _X!,1,MSet(IAXVAR(cointol)=${cointol},IAXVAR(initiallydeposited)=${initiallydeposited})
	same => n,Gosub(dialphreaknet-helper,s,1(${EXTEN},a)) ; use a for ACTS and c for CoinZone.
	same => n,Hangup()

[coin-dtf-init] ; Initialize coin denomination tone detector
exten => s,1,Set(COIN_DETECT(rl)=) ; keep track of deposits, but don't do or look for anything in particular
	same => n,Return()

[coin-line] ; EXTEN = Coin Line Type, ARG1 = initial deposit, ARG2 = digit map (positive = complete), ARG3 = rate class map (0 = free, 1 = local, 2 = non-local, e.g. pull in Coin Zone, TSPS, ACTS, etc.), ARG4 = local provider, ARG5 = toll provider, ARG6 = whether to return coins immediately when additional deposits required (0/1)
exten => permsig,1,Playback(if-youd-like-to-make-a-call&please-hang-up-and-try-again,noanswer)
	same => n,Gosub(coin-return,s,1)
	same => n,Return()
exten => notallowed,1,Playback(you-dialed-wrong-number,noanswer)
	same => n,Gosub(coin-return,s,1)
	same => n,Return()
exten => invalid,1,Playback(invalid,noanswer)
	same => n,Gosub(coin-return,s,1)
	same => n,Return()
exten => nolongdistance,1,Playback(not-auth-pstn,noanswer)
	same => n,Gosub(coin-return,s,1)
	same => n,Return()
exten => insufficient,1,Playback(deposit,noanswer)
	same => n,SayNumber(${ARG1})
	same => n,Playback(cents-please,noanswer)
	same => n,Gosub(coin-return,s,1)
	same => n,Goto(${coinlinetype},1)
exten => callerdone,1,Goto(${coinlinetype},1) ; DTF goes back to dial tone when call is done
exten => DTF,1,Answer()
	same => n,MSet(_callerchan=${CHANNEL},_coinlinetype=${EXTEN})
	; Enable coin detection using the totalizer. In reality, "real" coin lines don't do this, they use a ground test. You can do that, too, if you want, but this will work even if you can't do that.
	same => n,Gosub(coin-dtf-init,s,1) ; below, we assume that coins could be deposited anytime before dialing completed, not just on the first digit, so no need to read the first digit separately
	same => n,DialTone(LOCAL(number),${ARG2},custom/signal/dialtone,,32,,,pt)
	same => n,Set(LOCAL(deposited)=${COIN_DETECT(rx)}) ; Retrieve the amount deposited by the caller before or during dialing.
	same => n,Set(COIN_DETECT(x)=) ; Disable coin detection. We don't need it anymore.
	same => n,GotoIf(${ISNULL(${number})}?permsig,1)
	same => n,Set(LOCAL(rateclass)=${EVAL_EXTEN(phreaknet-coin-rate-class-map,${number},1)})
	same => n,GotoIf(${ISNULL(${rateclass})}?invalid,1) ; you shouldn't be dialing this...
	same => n,GotoIf($["${rateclass}"="0"]?free,1)
	same => n,Gosub(coin-initial-rate-test,s,1(${ARG1},${deposited}))
	same => n,GotoIf($["${GOSUB_RETVAL}"!="1"]?insufficient,1)
	same => n,GotoIf($["${rateclass}"="2"]?toll,1)
	same => n,Goto(local,1) ; we paid up or we wouldn't be here, so complete straight away!
exten => free,1,Gosub(coin-return,s,1)
	same => n,Goto(local,1)
exten => local,1,GotoIf(${ISNULL(${ARG4})}?nolongdistance,1) ; no local provider
	same => n,Set(CALLERID(ani2)=27)
	same => n,Dial(Local/${number}@${ARG4}/n,,g) ; we don't even need to split on answer. It's free or local, so there ARE NO ADDITIONAL DEPOSITS.
	same => n,GosubIf($["${DIALSTATUS}"="ANSWER"]?coin-collect,s,1:coin-return,s,1)
	same => n,Goto(callerdone,1)
exten => toll,1,GotoIf(${ISNULL(${ARG5})}?nolongdistance,1) ; no toll provider (e.g. CoinZone, TSPS, ACTS, etc.), so no calls that cost more than initial deposit
	same => n,Set(CALLERID(ani2)=27)
	same => n,Gosub(coin-return,s,1) ; Any initial deposit is returned by the end office (same as coin-first). SR-2275-3 6.17.3.4.2
	same => n,Set(LOCAL(deposited)=0)
	same => n,Set(LOCAL(deposited)=0) ; zero out deposits for postpay phones, since we know nada about that.
	same => n,Set(__cointol=3) ; Set coin type of line to 3, the PhreakNet code assigned for Dial Tone First (DTF)
	same => n,Set(__initiallydeposited=${MIN(${deposited},${ARG1})}) ; Amt Deposited, currently in hopper. We're not aware of anything greater than the initial deposit with a ground test.
	; With cointol + initialdeposit, Coin Zone has enough info to keep initial deposit if it wishes and only obtain differential.
	same => n,Gosub(operator-attached,s,1) ; Put the phone in operator attached mode, since the toll office wants it in operator attached mode when it gets there.
	same => n,Set(_coinid=${CALLERID(num)}) ; Set the unique _coinid to the Caller ID of the coin phone, which should be unique at any given time (no 3-way calling)
	same => n,Set(_callerchan=${CHANNEL})
	same => n,Set(COIN_EIS()=TX) ; Enable Expanded In Band Signaling control
	same => n,Dial(Local/${number}@${ARG5}/n,,G(split))
	same => n,Return()
	same => n(split),Goto(caller)
	same => n(callee),Set(COIN_EIS()=RX) ; Swap to the side facing the called party when we split.
	same => n(calleebridge),ConfBridge(coinline${coinid},silentbridge,incogtalker)
	same => n,Hangup() ; not Return!
	same => n(caller),Set(callsupervised=1)
	same => n,Set(COIN_EIS()=remove) ; the called-party facing side needs it
	same => n(callerbridge),GotoIf($["${SHARED(coincallover)}"="1"]?callerdone,1)
	same => n,ConfBridge(coinline${coinid},silentbridge,incogtalker)
	same => n,Goto(callerdone,1)
exten => h,1,NoOp(Coin Line Hangup: ${coinid})
	same => n,ExecIf(${CHANNEL_EXISTS(${callerchan})}?Set(SHARED(coincallover,${callerchan})=1)) ; prevent caller chan from hanging when it shouldn't
	same => n,ExecIf($[${CONFBRIDGE_INFO(parties,coinline${coinid})}>0]?ConfKick(coinline${coinid})) ; if either party hangs up, call is over...
	same => n,ExecIf($["${CHANNEL}"!="${callerchan}"]?Hangup)
	same => n,GosubIf($["${callsupervised}"="1"]?coin-collect,s,1:${IF($["${DIALSTATUS}"="ANSWER"]?coin-collect,s,1:coin-return,s,1)}) ; If the caller hangs up first, before we get told what to do via EIS, collect if answered, otherwise return.
